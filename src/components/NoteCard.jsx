import React from 'react';
import '../styles/Home.css';
import { format } from 'date-fns';
import { vi } from 'date-fns/locale';

// * Component NoteCard hi·ªÉn th·ªã m·ªôt th·∫ª ghi ch√∫ v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
// * Props: note (object), onDelete (func), onToggleComplete (func), onEdit (func)
const NoteCard = ({ note, onDelete, onToggleComplete, onEdit }) => {
  // * Destructuring th√¥ng tin t·ª´ note
  const { id, title, content, type, tags, deadline, completed } = note;

  // * ƒê·ªãnh nghƒ©a nh√£n v√† class CSS cho t·ª´ng lo·∫°i ghi ch√∫
  const typeLabels = {
    reminder: { label: 'Nh·∫Øc nh·ªü', class: 'type-reminder' },
    plan: { label: 'K·∫ø ho·∫°ch', class: 'type-plan' },
    deadline: { label: 'Deadline', class: 'type-deadline' },
    important: { label: 'Quan tr·ªçng', class: 'type-important' },
  };

  // * H√†m ƒë·ªãnh d·∫°ng ng√†y deadline sang ƒë·ªãnh d·∫°ng HH:mm dd/MM/yyyy ti·∫øng Vi·ªát
  const formatDate = (dateString) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return format(date, 'HH:mm dd/MM/yyyy', { locale: vi });
  };

  return (
    <div className="card note-card">
      <div className="card-body">
        {/* * Hi·ªÉn th·ªã lo·∫°i ghi ch√∫ v·ªõi m√†u s·∫Øc t∆∞∆°ng ·ª©ng */}
        <div className={`type-label ${typeLabels[type]?.class || ''}`}>
          {typeLabels[type]?.label || 'Ghi ch√∫'}
        </div>

        {/* * Ti√™u ƒë·ªÅ ghi ch√∫ */}
        <h5 className="card-title">{title}</h5>

        {/* * N·ªôi dung ghi ch√∫ n·∫øu c√≥ */}
        {content && <p className="card-text">{content}</p>}

        {/* * Danh s√°ch tag n·∫øu c√≥ */}
        {tags?.length > 0 && (
          <div className="tags-container">
            {tags.map((tag, index) => (
              <span key={index} className="tag-badge">
                #{tag}
              </span>
            ))}
          </div>
        )}

        {/* * Hi·ªÉn th·ªã deadline n·∫øu c√≥ */}
        {deadline && (
          <p className="card-text deadline-text">
            <svg
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <circle cx="12" cy="12" r="10"></circle>
              <polyline points="12 6 12 12 16 14"></polyline>
            </svg>
            <span className="text-danger">
              H·∫°n ch√≥t: {formatDate(deadline)}
            </span>
          </p>
        )}

        {/* * Tr·∫°ng th√°i ho√†n th√†nh c·ªßa ghi ch√∫ */}
        <p className="card-text status-text">
          <strong className={completed ? 'text-success' : 'text-warning'}>
            {completed ? '‚úÖ ƒê√£ ho√†n th√†nh' : 'üïí Ch∆∞a ho√†n th√†nh'}
          </strong>
        </p>

        {/* * C√°c h√†nh ƒë·ªông: ƒë√°nh d·∫•u ho√†n th√†nh, s·ª≠a, x√≥a */}
        <div className="card-actions">
          <div>
            <button
              className="btn-action btn-check"
              onClick={() => onToggleComplete(id)}
              title={
                completed
                  ? 'ƒê√°nh d·∫•u ch∆∞a ho√†n th√†nh'
                  : 'ƒê√°nh d·∫•u ƒë√£ ho√†n th√†nh'
              }
            >
              {completed ? '‚Ü©Ô∏è Ho√†n t√°c' : '‚úîÔ∏è Ho√†n th√†nh'}
            </button>
            <button
              className="btn-action btn-edit"
              onClick={() => onEdit(note)}
              title="Ch·ªânh s·ª≠a"
            >
              ‚úèÔ∏è S·ª≠a
            </button>
          </div>
          <button
            className="btn-action btn-delete"
            onClick={() => onDelete(id)}
            title="X√≥a ghi ch√∫"
          >
            üóëÔ∏è X√≥a
          </button>
        </div>
      </div>
    </div>
  );
};

export default NoteCard;
